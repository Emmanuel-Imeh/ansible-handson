# Multi-stage Dockerfile for FastAPI application
# Stage 1: Build stage
FROM python:3.13-slim

# Install system dependencies needed for building
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install uv for fast dependency management
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock ./

# Install dependencies
RUN uv sync --frozen


# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Add venv to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY main.py ./

# Change ownership of app directory to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set resource limits (handled by docker run or compose)
# These are examples - actual limits should be set via docker run --memory/--cpus

# Run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]
