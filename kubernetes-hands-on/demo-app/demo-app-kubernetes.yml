# -------------------------------
# Namespace
# -------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: demo-app
---
# -------------------------------
# ConfigMap (non-sensitive env vars)
# -------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config
  namespace: demo-app
data:
  DATABASE_URL: "postgresql://appuser:securepassword@postgres:5432/appdb"
  REDIS_URL: "redis://redis:6379/0"
  ALLOWED_ORIGINS: "http://localhost:5173,http://localhost:4173,http://localhost:3000,http://localhost:8080,http://localhost:3001,http://frontend:3000,http://,http://localhost:30080"
  ENVIRONMENT: "production"
  LOG_LEVEL: "info"
  WORKERS: "2"
  VITE_API_BASE_URL: "http://backend:8000"
---
# -------------------------------
# Postgres Deployment + PVC + Service
# -------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: demo-app
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - name: POSTGRES_USER
              value: appuser
            - name: POSTGRES_PASSWORD
              value: securepassword
            - name: POSTGRES_DB
              value: appdb
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "appuser", "-d", "appdb"]
            initialDelaySeconds: 60
            periodSeconds: 30
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: demo-app
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
# -------------------------------
# Redis Deployment + PVC + Service
# -------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: demo-app
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 30
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: demo-app
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
---
# -------------------------------
# Backend Deployment + Service
# -------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: docker-demo-app:latest
          imagePullPolicy: Never # Use this if image is built locally, remove if pulling from registry
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: demo-config
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 30
      volumes:
        - name: app-logs
          emptyDir: {} # swap with PVC if persistent logs needed
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: demo-app
spec:
  # type: ClusterIP
  type: NodePort
  selector:
    app: backend
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30081
---
# -------------------------------
# Frontend Deployment + Service
# -------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: demo-frontend:k8
          imagePullPolicy: Never # Use this if image is built locally, remove if pulling from registry
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: demo-config
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: demo-app
spec:
  type: NodePort # Or LoadBalancer if in cloud
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30080
